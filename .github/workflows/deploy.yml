name: Deploy to Vercel on Release

on:
  release:
    types: [published]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log Event Context
        run: |
          echo "The workflow was triggered by the following event:"
          echo "${{ toJson(github) }}"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Get existing deployments
        id: get_deployments
        run: |
          # Fetch existing deployments using Vercel API
          deployments=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v1/deployments?projectId=${{ secrets.PROJECT_ID }}")
          echo "$deployments"
          echo "::set-output name=deployments::$deployments"

      - name: Delete old deployment if exists
        if: steps.get_deployments.outputs.deployments != ''
        run: |
          old_deployment_id=$(echo '{"deployments":[{"uid":"dpl_26cnb4Ms1XfZfzDyyXBE5TZYqMpu","name":"mobile-webapp","url":"mobile-webapp-b9kjdul1g-teacup-mobiles-projects.vercel.app","created":1730602778037,"source":"cli","readyState":"READY","type":"LAMBDAS","creator":{"uid":"v0hZe7srosUlQtc2ye0Gh5BT"},"inspectorUrl":"https://vercel.com/teacup-mobiles-projects/mobile-webapp/26cnb4Ms1XfZfzDyyXBE5TZYqMpu"}]}' | jq -r '.deployments[0].uid')
          echo "Deleting old deployment with ID: $old_deployment_id"
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v1/deployments/$old_deployment_id"

      - name: Deploy to Vercel
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
